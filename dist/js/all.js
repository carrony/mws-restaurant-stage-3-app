"use strict";navigator.serviceWorker&&(navigator.serviceWorker.register("./sw.js",{scope:"./"}).then(function(e){console.log("sevice worker registered")}).catch(function(e){console.log("error registering...")}),navigator.serviceWorker.ready.then(function(e){return e.sync.register("sendPendingPost")})),function(){function u(n){return new Promise(function(e,t){n.onsuccess=function(){e(n.result)},n.onerror=function(){t(n.error)}})}function i(n,r,o){var i,e=new Promise(function(e,t){u(i=n[r].apply(n,o)).then(e,t)});return e.request=i,e}function e(e,n,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this[n][t]},set:function(e){this[n][t]=e}})})}function t(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return i(this[n],e,arguments)})})}function n(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return this[n][e].apply(this[n],arguments)})})}function r(e,r,t,n){n.forEach(function(n){n in t.prototype&&(e.prototype[n]=function(){return e=this[r],(t=i(e,n,arguments)).then(function(e){if(e)return new c(e,t.request)});var e,t})})}function o(e){this._index=e}function c(e,t){this._cursor=e,this._request=t}function a(e){this._store=e}function s(n){this._tx=n,this.complete=new Promise(function(e,t){n.oncomplete=function(){e()},n.onerror=function(){t(n.error)},n.onabort=function(){t(n.error)}})}function l(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new s(n)}function f(e){this._db=e}e(o,"_index",["name","keyPath","multiEntry","unique"]),t(o,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),r(o,"_index",IDBIndex,["openCursor","openKeyCursor"]),e(c,"_cursor",["direction","key","primaryKey","value"]),t(c,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(c.prototype[n]=function(){var t=this,e=arguments;return Promise.resolve().then(function(){return t._cursor[n].apply(t._cursor,e),u(t._request).then(function(e){if(e)return new c(e,t._request)})})})}),a.prototype.createIndex=function(){return new o(this._store.createIndex.apply(this._store,arguments))},a.prototype.index=function(){return new o(this._store.index.apply(this._store,arguments))},e(a,"_store",["name","keyPath","indexNames","autoIncrement"]),t(a,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),r(a,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(a,"_store",IDBObjectStore,["deleteIndex"]),s.prototype.objectStore=function(){return new a(this._tx.objectStore.apply(this._tx,arguments))},e(s,"_tx",["objectStoreNames","mode"]),n(s,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new a(this._db.createObjectStore.apply(this._db,arguments))},e(l,"_db",["name","version","objectStoreNames"]),n(l,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new s(this._db.transaction.apply(this._db,arguments))},e(f,"_db",["name","version","objectStoreNames"]),n(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(i){[a,o].forEach(function(e){i in e.prototype&&(e.prototype[i.replace("open","iterate")]=function(){var e,t=(e=arguments,Array.prototype.slice.call(e)),n=t[t.length-1],r=this._store||this._index,o=r[i].apply(r,t.slice(0,-1));o.onsuccess=function(){n(o.result)}})})}),[o,a].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,n){var r=this,o=[];return new Promise(function(t){r.iterateCursor(e,function(e){e?(o.push(e.value),void 0===n||o.length!=n?e.continue():t(o)):t(o)})})})});var h={open:function(e,t,n){var r=i(indexedDB,"open",[e,t]),o=r.request;return o&&(o.onupgradeneeded=function(e){n&&n(new l(o.result,e.oldVersion,o.transaction))}),r.then(function(e){return new f(e)})},delete:function(e){return i(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=h,module.exports.default=module.exports):self.idb=h}();var _createClass=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var DBHelper=function(){function u(){_classCallCheck(this,u)}return _createClass(u,null,[{key:"fetchRestaurants",value:function(r){var t=idb.open("restauntsDB",1,function(e){e.createObjectStore("restaurants",{keyPath:"id"})});t.then(function(e){return e.transaction("restaurants").objectStore("restaurants").getAll()}).then(function(e){0==e.length?(console.log("no hay datos"),fetch(u.DATABASE_URL).then(function(e){return e.json()}).then(function(n){t.then(function(e){var t=e.transaction("restaurants","readwrite").objectStore("restaurants");n.forEach(function(e){t.put(e)}),r(null,n)})}).catch(function(e){r(e,null)})):r(null,e)})}},{key:"fetchRestaurantById",value:function(r,o){u.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.find(function(e){return e.id==r});n?o(null,n):o("Restaurant does not exist",null)}})}},{key:"fetchRestaurantByCuisine",value:function(r,o){u.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.filter(function(e){return e.cuisine_type==r});o(null,n)}})}},{key:"fetchRestaurantByNeighborhood",value:function(r,o){u.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.filter(function(e){return e.neighborhood==r});o(null,n)}})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(r,o,i){u.fetchRestaurants(function(e,t){if(e)i(e,null);else{var n=t;"all"!=r&&(n=n.filter(function(e){return e.cuisine_type==r})),"all"!=o&&(n=n.filter(function(e){return e.neighborhood==o})),i(null,n)}})}},{key:"fetchNeighborhoods",value:function(o){u.fetchRestaurants(function(e,n){if(e)o(e,null);else{var r=n.map(function(e,t){return n[t].neighborhood}),t=r.filter(function(e,t){return r.indexOf(e)==t});o(null,t)}})}},{key:"fetchCuisines",value:function(o){u.fetchRestaurants(function(e,n){if(e)o(e,null);else{var r=n.map(function(e,t){return n[t].cuisine_type}),t=r.filter(function(e,t){return r.indexOf(e)==t});o(null,t)}})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id="+e.id}},{key:"imagesSrcsetForRestaurant",value:function(e){var t=e.photograph;return t||(t="10"),"/img/"+t+"-small.jpg 250w,\n            /img/"+t+"-medium.jpg 460w,\n            /img/"+t+"-large.jpg 800w"}},{key:"imageSizesForRestaurant",value:function(e){return e?"(max-width: 618px) calc(100vw - 80px), calc(50vw - 80px)":"(max-width: 618px) calc(100vw - 90px), calc(50vw - 90px)"}},{key:"imageUrlForRestaurant",value:function(e){var t=e.photograph;return t||(t="10"),"/img/"+t+"-small.jpg"}},{key:"mapMarkerForRestaurant",value:function(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:u.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}},{key:"storeReviewsDB",value:function(n,e){return idb.open(e,1,function(e){e.createObjectStore("reviews",{keyPath:"name"})}).then(function(e){var t=e.transaction("reviews","readwrite").objectStore("reviews");n.forEach(function(e){t.put(e)})})}},{key:"removeReviewFromDB",value:function(t,n){return idb.open(n,1,function(e){e.createObjectStore("reviews",{keyPath:"name"})}).then(function(e){console.log(n),e.transaction("reviews","readwrite").objectStore("reviews").delete(t.name)})}},{key:"getAllReviewsDB",value:function(e){return idb.open(e,1,function(e){e.createObjectStore("reviews",{keyPath:"name"})}).then(function(e){return e.transaction("reviews").objectStore("reviews").getAll()})}},{key:"sendPostRequest",value:function(n){return fetch(u.REVIEWS_URL,{method:"POST",body:JSON.stringify(n)}).catch(function(e){var t=[];return t.push(n),console.log("database"),u.storeReviewsDB(t,"pendingPostsDB")})}},{key:"deleteReview",value:function(e){if(e.id)return fetch((e.id,{method:"DELETE"}))}},{key:"fetchReviewsById",value:function(e,t){fetch(u.REVIEWS_URL+"?restaurant_id="+e).then(function(e){return e.json()}).then(function(e){u.storeReviewsDB(e,"reviews").then(t(null,e)).catch(function(e){return t(e,null)})}).catch(function(e){u.getAllReviewsDB("reviews").then(function(e){t(null,e)}).catch(function(e){t(e,null)})})}},{key:"DATABASE_URL",get:function(){return"http://localhost:1337/restaurants"}},{key:"REVIEWS_URL",get:function(){return"http://localhost:1337/reviews/"}}]),u}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
