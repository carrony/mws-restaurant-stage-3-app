"use strict";navigator.serviceWorker&&(navigator.serviceWorker.register("./sw.js",{scope:"./"}).then(function(e){console.log("sevice worker registered")}).catch(function(e){console.log("error registering...")}),navigator.serviceWorker.ready.then(function(e){return e.sync.register("sendPendingPost")}),window.addEventListener("online",function(){navigator.serviceWorker.controller.postMessage("online"),console.log("online")})),function(){function u(n){return new Promise(function(e,t){n.onsuccess=function(){e(n.result)},n.onerror=function(){t(n.error)}})}function i(n,r,o){var i,e=new Promise(function(e,t){u(i=n[r].apply(n,o)).then(e,t)});return e.request=i,e}function e(e,n,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this[n][t]},set:function(e){this[n][t]=e}})})}function t(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return i(this[n],e,arguments)})})}function n(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return this[n][e].apply(this[n],arguments)})})}function r(e,r,t,n){n.forEach(function(n){n in t.prototype&&(e.prototype[n]=function(){return e=this[r],(t=i(e,n,arguments)).then(function(e){if(e)return new a(e,t.request)});var e,t})})}function o(e){this._index=e}function a(e,t){this._cursor=e,this._request=t}function c(e){this._store=e}function s(n){this._tx=n,this.complete=new Promise(function(e,t){n.oncomplete=function(){e()},n.onerror=function(){t(n.error)},n.onabort=function(){t(n.error)}})}function l(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new s(n)}function f(e){this._db=e}e(o,"_index",["name","keyPath","multiEntry","unique"]),t(o,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),r(o,"_index",IDBIndex,["openCursor","openKeyCursor"]),e(a,"_cursor",["direction","key","primaryKey","value"]),t(a,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(a.prototype[n]=function(){var t=this,e=arguments;return Promise.resolve().then(function(){return t._cursor[n].apply(t._cursor,e),u(t._request).then(function(e){if(e)return new a(e,t._request)})})})}),c.prototype.createIndex=function(){return new o(this._store.createIndex.apply(this._store,arguments))},c.prototype.index=function(){return new o(this._store.index.apply(this._store,arguments))},e(c,"_store",["name","keyPath","indexNames","autoIncrement"]),t(c,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),r(c,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(c,"_store",IDBObjectStore,["deleteIndex"]),s.prototype.objectStore=function(){return new c(this._tx.objectStore.apply(this._tx,arguments))},e(s,"_tx",["objectStoreNames","mode"]),n(s,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new c(this._db.createObjectStore.apply(this._db,arguments))},e(l,"_db",["name","version","objectStoreNames"]),n(l,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new s(this._db.transaction.apply(this._db,arguments))},e(f,"_db",["name","version","objectStoreNames"]),n(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(i){[c,o].forEach(function(e){i in e.prototype&&(e.prototype[i.replace("open","iterate")]=function(){var e,t=(e=arguments,Array.prototype.slice.call(e)),n=t[t.length-1],r=this._store||this._index,o=r[i].apply(r,t.slice(0,-1));o.onsuccess=function(){n(o.result)}})})}),[o,c].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,n){var r=this,o=[];return new Promise(function(t){r.iterateCursor(e,function(e){e?(o.push(e.value),void 0===n||o.length!=n?e.continue():t(o)):t(o)})})})});var h={open:function(e,t,n){var r=i(indexedDB,"open",[e,t]),o=r.request;return o&&(o.onupgradeneeded=function(e){n&&n(new l(o.result,e.oldVersion,o.transaction))}),r.then(function(e){return new f(e)})},delete:function(e){return i(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=h,module.exports.default=module.exports):self.idb=h}();var _createClass=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var DBHelper=function(){function u(){_classCallCheck(this,u)}return _createClass(u,null,[{key:"fetchRestaurants",value:function(r){var t=idb.open("restauntsDB",1,function(e){e.createObjectStore("restaurants",{keyPath:"id"})});t.then(function(e){return e.transaction("restaurants").objectStore("restaurants").getAll()}).then(function(e){0==e.length?(console.log("no hay datos"),fetch(u.DATABASE_URL).then(function(e){return e.json()}).then(function(n){t.then(function(e){var t=e.transaction("restaurants","readwrite").objectStore("restaurants");n.forEach(function(e){t.put(e)}),r(null,n)})}).catch(function(e){r(e,null)})):r(null,e)})}},{key:"fetchRestaurantById",value:function(r,o){u.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.find(function(e){return e.id==r});n?o(null,n):o("Restaurant does not exist",null)}})}},{key:"fetchRestaurantByCuisine",value:function(r,o){u.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.filter(function(e){return e.cuisine_type==r});o(null,n)}})}},{key:"fetchRestaurantByNeighborhood",value:function(r,o){u.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.filter(function(e){return e.neighborhood==r});o(null,n)}})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(r,o,i){u.fetchRestaurants(function(e,t){if(e)i(e,null);else{var n=t;"all"!=r&&(n=n.filter(function(e){return e.cuisine_type==r})),"all"!=o&&(n=n.filter(function(e){return e.neighborhood==o})),i(null,n)}})}},{key:"fetchNeighborhoods",value:function(o){u.fetchRestaurants(function(e,n){if(e)o(e,null);else{var r=n.map(function(e,t){return n[t].neighborhood}),t=r.filter(function(e,t){return r.indexOf(e)==t});o(null,t)}})}},{key:"fetchCuisines",value:function(o){u.fetchRestaurants(function(e,n){if(e)o(e,null);else{var r=n.map(function(e,t){return n[t].cuisine_type}),t=r.filter(function(e,t){return r.indexOf(e)==t});o(null,t)}})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id="+e.id}},{key:"imagesSrcsetForRestaurant",value:function(e){var t=e.photograph;return t||(t="10"),"/img/"+t+"-small.jpg 250w,\n            /img/"+t+"-medium.jpg 460w,\n            /img/"+t+"-large.jpg 800w"}},{key:"imageSizesForRestaurant",value:function(e){return e?"(max-width: 618px) calc(100vw - 80px), calc(50vw - 80px)":"(max-width: 618px) calc(100vw - 90px), calc(50vw - 90px)"}},{key:"imageUrlForRestaurant",value:function(e){var t=e.photograph;return t||(t="10"),"/img/"+t+"-small.jpg"}},{key:"mapMarkerForRestaurant",value:function(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:u.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}},{key:"storeReviewsDB",value:function(n,e){return idb.open(e,1,function(e){e.createObjectStore("reviews",{keyPath:"name"})}).then(function(e){var t=e.transaction("reviews","readwrite").objectStore("reviews");n.forEach(function(e){t.put(e)})})}},{key:"removeReviewFromDB",value:function(t,n){return idb.open(n,1,function(e){e.createObjectStore("reviews",{keyPath:"name"})}).then(function(e){console.log(n),e.transaction("reviews","readwrite").objectStore("reviews").delete(t.name)})}},{key:"getAllReviewsDB",value:function(e){return idb.open(e,1,function(e){e.createObjectStore("reviews",{keyPath:"name"})}).then(function(e){return e.transaction("reviews").objectStore("reviews").getAll()})}},{key:"sendPostRequest",value:function(n){return fetch(u.REVIEWS_URL,{method:"POST",body:JSON.stringify(n)}).catch(function(e){var t=[];return t.push(n),console.log("database"),u.storeReviewsDB(t,"pendingPostsDB")})}},{key:"changeFavoriteStatus",value:function(e,t){fetch(u.DATABASE_URL+"/"+e+"/?is_favorite="+t,{method:"PUT"}).then(function(){console.log("updated")}).catch(function(e){return console.log(e)})}},{key:"updateRestaurantFav",value:function(n){return idb.open("restauntsDB",1,function(e){e.createObjectStore("restaurants",{keyPath:"id"})}).then(function(e){var t=e.transaction("restaurants","readwrite").objectStore("restaurants");t.get(n).then(function(e){e.is_favorite="true"===e.is_favorite||!0===e.is_favorite,e.is_favorite=!e.is_favorite,t.put(e),u.changeFavoriteStatus(n,e.is_favorite)})})}},{key:"deleteReview",value:function(e){if(e.id)return fetch((e.id,{method:"DELETE"}))}},{key:"fetchReviewsById",value:function(e,t){fetch(u.REVIEWS_URL+"?restaurant_id="+e).then(function(e){return e.json()}).then(function(e){u.storeReviewsDB(e,"reviews").then(t(null,e)).catch(function(e){return t(e,null)})}).catch(function(e){u.getAllReviewsDB("reviews").then(function(e){t(null,e)}).catch(function(e){t(e,null)})})}},{key:"DATABASE_URL",get:function(){return"http://localhost:1337/restaurants"}},{key:"REVIEWS_URL",get:function(){return"http://localhost:1337/reviews/"}}]),u}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN3X3JlZ2lzdGVyLmpzIiwiaWRiLmpzIiwiZGJoZWxwZXIuanMiXSwibmFtZXMiOlsibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsInJlZ2lzdGVyIiwic2NvcGUiLCJ0aGVuIiwicmVnIiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZXJyIiwicmVhZHkiLCJzd1JlZ2lzdHJhdGlvbiIsInN5bmMiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiY29udHJvbGxlciIsInBvc3RNZXNzYWdlIiwicHJvbWlzaWZ5UmVxdWVzdCIsInJlcXVlc3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uc3VjY2VzcyIsInJlc3VsdCIsIm9uZXJyb3IiLCJlcnJvciIsInByb21pc2lmeVJlcXVlc3RDYWxsIiwib2JqIiwibWV0aG9kIiwiYXJncyIsInAiLCJhcHBseSIsInByb3h5UHJvcGVydGllcyIsIlByb3h5Q2xhc3MiLCJ0YXJnZXRQcm9wIiwicHJvcGVydGllcyIsImZvckVhY2giLCJwcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJwcm90b3R5cGUiLCJnZXQiLCJ0aGlzIiwic2V0IiwidmFsIiwicHJveHlSZXF1ZXN0TWV0aG9kcyIsIkNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwicHJveHlNZXRob2RzIiwicHJveHlDdXJzb3JSZXF1ZXN0TWV0aG9kcyIsInZhbHVlIiwiQ3Vyc29yIiwiSW5kZXgiLCJpbmRleCIsIl9pbmRleCIsImN1cnNvciIsIl9jdXJzb3IiLCJfcmVxdWVzdCIsIk9iamVjdFN0b3JlIiwic3RvcmUiLCJfc3RvcmUiLCJUcmFuc2FjdGlvbiIsImlkYlRyYW5zYWN0aW9uIiwiX3R4IiwiY29tcGxldGUiLCJvbmNvbXBsZXRlIiwib25hYm9ydCIsIlVwZ3JhZGVEQiIsImRiIiwib2xkVmVyc2lvbiIsInRyYW5zYWN0aW9uIiwiX2RiIiwiREIiLCJJREJJbmRleCIsIklEQkN1cnNvciIsIm1ldGhvZE5hbWUiLCJjcmVhdGVJbmRleCIsIklEQk9iamVjdFN0b3JlIiwib2JqZWN0U3RvcmUiLCJJREJUcmFuc2FjdGlvbiIsImNyZWF0ZU9iamVjdFN0b3JlIiwiSURCRGF0YWJhc2UiLCJmdW5jTmFtZSIsInJlcGxhY2UiLCJhcnIiLCJBcnJheSIsInNsaWNlIiwiY2FsbCIsImNhbGxiYWNrIiwibGVuZ3RoIiwibmF0aXZlT2JqZWN0IiwiZ2V0QWxsIiwicXVlcnkiLCJjb3VudCIsImluc3RhbmNlIiwiaXRlbXMiLCJpdGVyYXRlQ3Vyc29yIiwicHVzaCIsInVuZGVmaW5lZCIsImNvbnRpbnVlIiwiZXhwIiwib3BlbiIsIm5hbWUiLCJ2ZXJzaW9uIiwidXBncmFkZUNhbGxiYWNrIiwiaW5kZXhlZERCIiwib251cGdyYWRlbmVlZGVkIiwiZXZlbnQiLCJkZWxldGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCIsInNlbGYiLCJpZGIiLCJEQkhlbHBlciIsImRiUHJvbWlzZSIsInVwZ3JhZGVEYiIsImtleVBhdGgiLCJyZXN0YXVyYW50cyIsImZldGNoIiwiREFUQUJBU0VfVVJMIiwicmVzcG9uc2UiLCJqc29uIiwicmVzdGF1cmFudFN0b3JlIiwiZWxlbWVudCIsInB1dCIsImlkIiwiZmV0Y2hSZXN0YXVyYW50cyIsInJlc3RhdXJhbnQiLCJmaW5kIiwiciIsImN1aXNpbmUiLCJyZXN1bHRzIiwiZmlsdGVyIiwiY3Vpc2luZV90eXBlIiwibmVpZ2hib3Job29kIiwibmVpZ2hib3Job29kcyIsIm1hcCIsInYiLCJpIiwidW5pcXVlTmVpZ2hib3Job29kcyIsImluZGV4T2YiLCJjdWlzaW5lcyIsInVuaXF1ZUN1aXNpbmVzIiwiZmlsZW5hbWUiLCJwaG90b2dyYXBoIiwiaW5uZXIiLCJnb29nbGUiLCJtYXBzIiwiTWFya2VyIiwicG9zaXRpb24iLCJsYXRsbmciLCJ0aXRsZSIsInVybCIsInVybEZvclJlc3RhdXJhbnQiLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJEUk9QIiwicmV2aWV3cyIsImRhdGFiYXNlIiwicmV2aWV3c1N0b3JlIiwicmV2aWV3IiwiUkVWSUVXU19VUkwiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInN0b3JlUmV2aWV3c0RCIiwiZmF2b3JpdGUiLCJpc19mYXZvcml0ZSIsImNoYW5nZUZhdm9yaXRlU3RhdHVzIiwiZ2V0QWxsUmV2aWV3c0RCIl0sIm1hcHBpbmdzIjoiYUFDSUEsVUFBVUMsZ0JBRVZELFVBQVVDLGNBQWNDLFNBQVMsVUFBVSxDQUN2Q0MsTUFBTyxPQUNSQyxLQUFLLFNBQVNDLEdBQ2JDLFFBQVFDLElBQUksOEJBQ2JDLE1BQU0sU0FBU0MsR0FDZEgsUUFBUUMsSUFBSSwwQkFHaEJQLFVBQVVDLGNBQWNTLE1BQU1OLEtBQUssU0FBU08sR0FDeEMsT0FBT0EsRUFBZUMsS0FBS1YsU0FBUyxxQkFHeENXLE9BQU9DLGlCQUFpQixTQUFVLFdBQzlCZCxVQUFVQyxjQUFjYyxXQUFXQyxZQUFZLFVBQy9DVixRQUFRQyxJQUFJLGFDZm5CLFdBS0MsU0FBU1UsRUFBaUJDLEdBQ3hCLE9BQU8sSUFBSUMsUUFBUSxTQUFTQyxFQUFTQyxHQUNuQ0gsRUFBUUksVUFBWSxXQUNsQkYsRUFBUUYsRUFBUUssU0FHbEJMLEVBQVFNLFFBQVUsV0FDaEJILEVBQU9ILEVBQVFPLFVBS3JCLFNBQVNDLEVBQXFCQyxFQUFLQyxFQUFRQyxHQUN6QyxJQUFJWCxFQUNBWSxFQUFJLElBQUlYLFFBQVEsU0FBU0MsRUFBU0MsR0FFcENKLEVBREFDLEVBQVVTLEVBQUlDLEdBQVFHLE1BQU1KLEVBQUtFLElBQ1B6QixLQUFLZ0IsRUFBU0MsS0FJMUMsT0FEQVMsRUFBRVosUUFBVUEsRUFDTFksRUFXVCxTQUFTRSxFQUFnQkMsRUFBWUMsRUFBWUMsR0FDL0NBLEVBQVdDLFFBQVEsU0FBU0MsR0FDMUJDLE9BQU9DLGVBQWVOLEVBQVdPLFVBQVdILEVBQU0sQ0FDaERJLElBQUssV0FDSCxPQUFPQyxLQUFLUixHQUFZRyxJQUUxQk0sSUFBSyxTQUFTQyxHQUNaRixLQUFLUixHQUFZRyxHQUFRTyxPQU1qQyxTQUFT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U3dELGdCQUFnQixXQUN4QnRLLEtBQU0sU0FBVTBKLEdBRWZ0RSxFQUFTLEtBQUtzRSxLQUNidEosTUFBTSxTQUFTaUIsR0FFaEIrRCxFQUFTL0QsRUFBTSwrQ0F2V3JCLE1BQUEsd0VBU0EsTUFBQSIsImZpbGUiOiJhbGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvL2ZvciBjb21wYXRpYmxlIGJyb3dzZXJzXHJcbmlmIChuYXZpZ2F0b3Iuc2VydmljZVdvcmtlcikge1xyXG4gICAgLy8gUkVnaXN0ZXJpbmcgdGhlIHNlcnZpY2Ugd29ya2VyXHJcbiAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcignLi9zdy5qcycse1xyXG4gICAgICAgIHNjb3BlOiAnLi8nXHJcbiAgICB9KS50aGVuKGZ1bmN0aW9uKHJlZykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdzZXZpY2Ugd29ya2VyIHJlZ2lzdGVyZWQnKVxyXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yIHJlZ2lzdGVyaW5nLi4uJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeS50aGVuKGZ1bmN0aW9uKHN3UmVnaXN0cmF0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHN3UmVnaXN0cmF0aW9uLnN5bmMucmVnaXN0ZXIoJ3NlbmRQZW5kaW5nUG9zdCcpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25saW5lJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIucG9zdE1lc3NhZ2UoJ29ubGluZScpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwib25saW5lXCIpO1xyXG4gICAgfSlcclxuXHJcbiAgICAvKm5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBNZW5zYWplOiAke2V2ZW50YS5kYXRhfWApO1xyXG4gICAgfSkqL1xyXG5cclxuICAgLyogd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgc3RhdHVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdGF0dXNcIik7XHJcbiAgICAgICAgdmFyIGxvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9nXCIpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVPbmxpbmVTdGF0dXMoZXZlbnQpIHtcclxuICAgICAgICAgIHZhciBjb25kaXRpb24gPSBuYXZpZ2F0b3Iub25MaW5lID8gXCJvbmxpbmVcIiA6IFwib2ZmbGluZVwiO1xyXG5cclxuICAgICAgICAgIHN0YXR1cy5jbGFzc05hbWUgPSBjb25kaXRpb247XHJcbiAgICAgICAgICBzdGF0dXMuaW5uZXJIVE1MID0gY29uZGl0aW9uLnRvVXBwZXJDYXNlKCk7XHJcblxyXG4gICAgICAgICAgbG9nLmluc2VydEFkamFjZW50SFRNTChcImJlZm9yZWVuZFwiLCBcIkV2ZW50OiBcIiArIGV2ZW50LnR5cGUgKyBcIjsgU3RhdHVzOiBcIiArIGNvbmRpdGlvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25saW5lJywgIHVwZGF0ZU9ubGluZVN0YXR1cyk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29mZmxpbmUnLCB1cGRhdGVPbmxpbmVTdGF0dXMpO1xyXG4gICAgICB9KTsqL1xyXG59XHJcblxyXG5cclxuXHJcbiIsIid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiB0b0FycmF5KGFycikge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShyZXF1ZXN0LnJlc3VsdCk7XG4gICAgICB9O1xuXG4gICAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KHJlcXVlc3QuZXJyb3IpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb21pc2lmeVJlcXVlc3RDYWxsKG9iaiwgbWV0aG9kLCBhcmdzKSB7XG4gICAgdmFyIHJlcXVlc3Q7XG4gICAgdmFyIHAgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlcXVlc3QgPSBvYmpbbWV0aG9kXS5hcHBseShvYmosIGFyZ3MpO1xuICAgICAgcHJvbWlzaWZ5UmVxdWVzdChyZXF1ZXN0KS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSk7XG5cbiAgICBwLnJlcXVlc3QgPSByZXF1ZXN0O1xuICAgIHJldHVybiBwO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvbWlzaWZ5Q3Vyc29yUmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpIHtcbiAgICB2YXIgcCA9IHByb21pc2lmeVJlcXVlc3RDYWxsKG9iaiwgbWV0aG9kLCBhcmdzKTtcbiAgICByZXR1cm4gcC50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSByZXR1cm47XG4gICAgICByZXR1cm4gbmV3IEN1cnNvcih2YWx1ZSwgcC5yZXF1ZXN0KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3h5UHJvcGVydGllcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQcm94eUNsYXNzLnByb3RvdHlwZSwgcHJvcCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzW3RhcmdldFByb3BdW3Byb3BdO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlSZXF1ZXN0TWV0aG9kcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBDb25zdHJ1Y3RvciwgcHJvcGVydGllcykge1xuICAgIHByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICBpZiAoIShwcm9wIGluIENvbnN0cnVjdG9yLnByb3RvdHlwZSkpIHJldHVybjtcbiAgICAgIFByb3h5Q2xhc3MucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0Q2FsbCh0aGlzW3RhcmdldFByb3BdLCBwcm9wLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3h5TWV0aG9kcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBDb25zdHJ1Y3RvciwgcHJvcGVydGllcykge1xuICAgIHByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICBpZiAoIShwcm9wIGluIENvbnN0cnVjdG9yLnByb3RvdHlwZSkpIHJldHVybjtcbiAgICAgIFByb3h5Q2xhc3MucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzW3RhcmdldFByb3BdW3Byb3BdLmFwcGx5KHRoaXNbdGFyZ2V0UHJvcF0sIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlDdXJzb3JSZXF1ZXN0TWV0aG9kcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBDb25zdHJ1Y3RvciwgcHJvcGVydGllcykge1xuICAgIHByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICBpZiAoIShwcm9wIGluIENvbnN0cnVjdG9yLnByb3RvdHlwZSkpIHJldHVybjtcbiAgICAgIFByb3h5Q2xhc3MucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlDdXJzb3JSZXF1ZXN0Q2FsbCh0aGlzW3RhcmdldFByb3BdLCBwcm9wLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEluZGV4KGluZGV4KSB7XG4gICAgdGhpcy5faW5kZXggPSBpbmRleDtcbiAgfVxuXG4gIHByb3h5UHJvcGVydGllcyhJbmRleCwgJ19pbmRleCcsIFtcbiAgICAnbmFtZScsXG4gICAgJ2tleVBhdGgnLFxuICAgICdtdWx0aUVudHJ5JyxcbiAgICAndW5pcXVlJ1xuICBdKTtcblxuICBwcm94eVJlcXVlc3RNZXRob2RzKEluZGV4LCAnX2luZGV4JywgSURCSW5kZXgsIFtcbiAgICAnZ2V0JyxcbiAgICAnZ2V0S2V5JyxcbiAgICAnZ2V0QWxsJyxcbiAgICAnZ2V0QWxsS2V5cycsXG4gICAgJ2NvdW50J1xuICBdKTtcblxuICBwcm94eUN1cnNvclJlcXVlc3RNZXRob2RzKEluZGV4LCAnX2luZGV4JywgSURCSW5kZXgsIFtcbiAgICAnb3BlbkN1cnNvcicsXG4gICAgJ29wZW5LZXlDdXJzb3InXG4gIF0pO1xuXG4gIGZ1bmN0aW9uIEN1cnNvcihjdXJzb3IsIHJlcXVlc3QpIHtcbiAgICB0aGlzLl9jdXJzb3IgPSBjdXJzb3I7XG4gICAgdGhpcy5fcmVxdWVzdCA9IHJlcXVlc3Q7XG4gIH1cblxuICBwcm94eVByb3BlcnRpZXMoQ3Vyc29yLCAnX2N1cnNvcicsIFtcbiAgICAnZGlyZWN0aW9uJyxcbiAgICAna2V5JyxcbiAgICAncHJpbWFyeUtleScsXG4gICAgJ3ZhbHVlJ1xuICBdKTtcblxuICBwcm94eVJlcXVlc3RNZXRob2RzKEN1cnNvciwgJ19jdXJzb3InLCBJREJDdXJzb3IsIFtcbiAgICAndXBkYXRlJyxcbiAgICAnZGVsZXRlJ1xuICBdKTtcblxuICAvLyBwcm94eSAnbmV4dCcgbWV0aG9kc1xuICBbJ2FkdmFuY2UnLCAnY29udGludWUnLCAnY29udGludWVQcmltYXJ5S2V5J10uZm9yRWFjaChmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgaWYgKCEobWV0aG9kTmFtZSBpbiBJREJDdXJzb3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgIEN1cnNvci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjdXJzb3IgPSB0aGlzO1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgY3Vyc29yLl9jdXJzb3JbbWV0aG9kTmFtZV0uYXBwbHkoY3Vyc29yLl9jdXJzb3IsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdChjdXJzb3IuX3JlcXVlc3QpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm47XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdXJzb3IodmFsdWUsIGN1cnNvci5fcmVxdWVzdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gT2JqZWN0U3RvcmUoc3RvcmUpIHtcbiAgICB0aGlzLl9zdG9yZSA9IHN0b3JlO1xuICB9XG5cbiAgT2JqZWN0U3RvcmUucHJvdG90eXBlLmNyZWF0ZUluZGV4ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBJbmRleCh0aGlzLl9zdG9yZS5jcmVhdGVJbmRleC5hcHBseSh0aGlzLl9zdG9yZSwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgT2JqZWN0U3RvcmUucHJvdG90eXBlLmluZGV4ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBJbmRleCh0aGlzLl9zdG9yZS5pbmRleC5hcHBseSh0aGlzLl9zdG9yZSwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKE9iamVjdFN0b3JlLCAnX3N0b3JlJywgW1xuICAgICduYW1lJyxcbiAgICAna2V5UGF0aCcsXG4gICAgJ2luZGV4TmFtZXMnLFxuICAgICdhdXRvSW5jcmVtZW50J1xuICBdKTtcblxuICBwcm94eVJlcXVlc3RNZXRob2RzKE9iamVjdFN0b3JlLCAnX3N0b3JlJywgSURCT2JqZWN0U3RvcmUsIFtcbiAgICAncHV0JyxcbiAgICAnYWRkJyxcbiAgICAnZGVsZXRlJyxcbiAgICAnY2xlYXInLFxuICAgICdnZXQnLFxuICAgICdnZXRBbGwnLFxuICAgICdnZXRLZXknLFxuICAgICdnZXRBbGxLZXlzJyxcbiAgICAnY291bnQnXG4gIF0pO1xuXG4gIHByb3h5Q3Vyc29yUmVxdWVzdE1ldGhvZHMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBJREJPYmplY3RTdG9yZSwgW1xuICAgICdvcGVuQ3Vyc29yJyxcbiAgICAnb3BlbktleUN1cnNvcidcbiAgXSk7XG5cbiAgcHJveHlNZXRob2RzKE9iamVjdFN0b3JlLCAnX3N0b3JlJywgSURCT2JqZWN0U3RvcmUsIFtcbiAgICAnZGVsZXRlSW5kZXgnXG4gIF0pO1xuXG4gIGZ1bmN0aW9uIFRyYW5zYWN0aW9uKGlkYlRyYW5zYWN0aW9uKSB7XG4gICAgdGhpcy5fdHggPSBpZGJUcmFuc2FjdGlvbjtcbiAgICB0aGlzLmNvbXBsZXRlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBpZGJUcmFuc2FjdGlvbi5vbmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH07XG4gICAgICBpZGJUcmFuc2FjdGlvbi5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChpZGJUcmFuc2FjdGlvbi5lcnJvcik7XG4gICAgICB9O1xuICAgICAgaWRiVHJhbnNhY3Rpb24ub25hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QoaWRiVHJhbnNhY3Rpb24uZXJyb3IpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIFRyYW5zYWN0aW9uLnByb3RvdHlwZS5vYmplY3RTdG9yZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgT2JqZWN0U3RvcmUodGhpcy5fdHgub2JqZWN0U3RvcmUuYXBwbHkodGhpcy5fdHgsIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIHByb3h5UHJvcGVydGllcyhUcmFuc2FjdGlvbiwgJ190eCcsIFtcbiAgICAnb2JqZWN0U3RvcmVOYW1lcycsXG4gICAgJ21vZGUnXG4gIF0pO1xuXG4gIHByb3h5TWV0aG9kcyhUcmFuc2FjdGlvbiwgJ190eCcsIElEQlRyYW5zYWN0aW9uLCBbXG4gICAgJ2Fib3J0J1xuICBdKTtcblxuICBmdW5jdGlvbiBVcGdyYWRlREIoZGIsIG9sZFZlcnNpb24sIHRyYW5zYWN0aW9uKSB7XG4gICAgdGhpcy5fZGIgPSBkYjtcbiAgICB0aGlzLm9sZFZlcnNpb24gPSBvbGRWZXJzaW9uO1xuICAgIHRoaXMudHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pO1xuICB9XG5cbiAgVXBncmFkZURCLnByb3RvdHlwZS5jcmVhdGVPYmplY3RTdG9yZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgT2JqZWN0U3RvcmUodGhpcy5fZGIuY3JlYXRlT2JqZWN0U3RvcmUuYXBwbHkodGhpcy5fZGIsIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIHByb3h5UHJvcGVydGllcyhVcGdyYWRlREIsICdfZGInLCBbXG4gICAgJ25hbWUnLFxuICAgICd2ZXJzaW9uJyxcbiAgICAnb2JqZWN0U3RvcmVOYW1lcydcbiAgXSk7XG5cbiAgcHJveHlNZXRob2RzKFVwZ3JhZGVEQiwgJ19kYicsIElEQkRhdGFiYXNlLCBbXG4gICAgJ2RlbGV0ZU9iamVjdFN0b3JlJyxcbiAgICAnY2xvc2UnXG4gIF0pO1xuXG4gIGZ1bmN0aW9uIERCKGRiKSB7XG4gICAgdGhpcy5fZGIgPSBkYjtcbiAgfVxuXG4gIERCLnByb3RvdHlwZS50cmFuc2FjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb24odGhpcy5fZGIudHJhbnNhY3Rpb24uYXBwbHkodGhpcy5fZGIsIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIHByb3h5UHJvcGVydGllcyhEQiwgJ19kYicsIFtcbiAgICAnbmFtZScsXG4gICAgJ3ZlcnNpb24nLFxuICAgICdvYmplY3RTdG9yZU5hbWVzJ1xuICBdKTtcblxuICBwcm94eU1ldGhvZHMoREIsICdfZGInLCBJREJEYXRhYmFzZSwgW1xuICAgICdjbG9zZSdcbiAgXSk7XG5cbiAgLy8gQWRkIGN1cnNvciBpdGVyYXRvcnNcbiAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgb25jZSBicm93c2VycyBkbyB0aGUgcmlnaHQgdGhpbmcgd2l0aCBwcm9taXNlc1xuICBbJ29wZW5DdXJzb3InLCAnb3BlbktleUN1cnNvciddLmZvckVhY2goZnVuY3Rpb24oZnVuY05hbWUpIHtcbiAgICBbT2JqZWN0U3RvcmUsIEluZGV4XS5mb3JFYWNoKGZ1bmN0aW9uKENvbnN0cnVjdG9yKSB7XG4gICAgICAvLyBEb24ndCBjcmVhdGUgaXRlcmF0ZUtleUN1cnNvciBpZiBvcGVuS2V5Q3Vyc29yIGRvZXNuJ3QgZXhpc3QuXG4gICAgICBpZiAoIShmdW5jTmFtZSBpbiBDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSByZXR1cm47XG5cbiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZVtmdW5jTmFtZS5yZXBsYWNlKCdvcGVuJywgJ2l0ZXJhdGUnKV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICAgICAgdmFyIG5hdGl2ZU9iamVjdCA9IHRoaXMuX3N0b3JlIHx8IHRoaXMuX2luZGV4O1xuICAgICAgICB2YXIgcmVxdWVzdCA9IG5hdGl2ZU9iamVjdFtmdW5jTmFtZV0uYXBwbHkobmF0aXZlT2JqZWN0LCBhcmdzLnNsaWNlKDAsIC0xKSk7XG4gICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2FsbGJhY2socmVxdWVzdC5yZXN1bHQpO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gcG9seWZpbGwgZ2V0QWxsXG4gIFtJbmRleCwgT2JqZWN0U3RvcmVdLmZvckVhY2goZnVuY3Rpb24oQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEFsbCkgcmV0dXJuO1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbihxdWVyeSwgY291bnQpIHtcbiAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXM7XG4gICAgICB2YXIgaXRlbXMgPSBbXTtcblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgICAgaW5zdGFuY2UuaXRlcmF0ZUN1cnNvcihxdWVyeSwgZnVuY3Rpb24oY3Vyc29yKSB7XG4gICAgICAgICAgaWYgKCFjdXJzb3IpIHtcbiAgICAgICAgICAgIHJlc29sdmUoaXRlbXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpdGVtcy5wdXNoKGN1cnNvci52YWx1ZSk7XG5cbiAgICAgICAgICBpZiAoY291bnQgIT09IHVuZGVmaW5lZCAmJiBpdGVtcy5sZW5ndGggPT0gY291bnQpIHtcbiAgICAgICAgICAgIHJlc29sdmUoaXRlbXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJzb3IuY29udGludWUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxuICB2YXIgZXhwID0ge1xuICAgIG9wZW46IGZ1bmN0aW9uKG5hbWUsIHZlcnNpb24sIHVwZ3JhZGVDYWxsYmFjaykge1xuICAgICAgdmFyIHAgPSBwcm9taXNpZnlSZXF1ZXN0Q2FsbChpbmRleGVkREIsICdvcGVuJywgW25hbWUsIHZlcnNpb25dKTtcbiAgICAgIHZhciByZXF1ZXN0ID0gcC5yZXF1ZXN0O1xuXG4gICAgICBpZiAocmVxdWVzdCkge1xuICAgICAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKHVwZ3JhZGVDYWxsYmFjaykge1xuICAgICAgICAgICAgdXBncmFkZUNhbGxiYWNrKG5ldyBVcGdyYWRlREIocmVxdWVzdC5yZXN1bHQsIGV2ZW50Lm9sZFZlcnNpb24sIHJlcXVlc3QudHJhbnNhY3Rpb24pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwLnRoZW4oZnVuY3Rpb24oZGIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEQihkYik7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRlbGV0ZTogZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3RDYWxsKGluZGV4ZWREQiwgJ2RlbGV0ZURhdGFiYXNlJywgW25hbWVdKTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBleHA7XG4gICAgbW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IG1vZHVsZS5leHBvcnRzO1xuICB9XG4gIGVsc2Uge1xuICAgIHNlbGYuaWRiID0gZXhwO1xuICB9XG59KCkpO1xuIiwiLyoqXHJcbiAqIENvbW1vbiBkYXRhYmFzZSBoZWxwZXIgZnVuY3Rpb25zLlxyXG4gKi9cclxuY2xhc3MgREJIZWxwZXIge1xyXG5cclxuICAvKipcclxuICAgKiBEYXRhYmFzZSBVUkwuXHJcbiAgICogQ2hhbmdlIHRoaXMgdG8gcmVzdGF1cmFudHMuanNvbiBmaWxlIGxvY2F0aW9uIG9uIHlvdXIgc2VydmVyLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXQgREFUQUJBU0VfVVJMKCkge1xyXG4gICAgY29uc3QgcG9ydCA9IDEzMzcgLy8gQ2hhbmdlIHRoaXMgdG8geW91ciBzZXJ2ZXIgcG9ydFxyXG4gICAgcmV0dXJuIGBodHRwOi8vbG9jYWxob3N0OiR7cG9ydH0vcmVzdGF1cmFudHNgO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGF0YWJhc2UgVVJMLlxyXG4gICAqIEZvciBzdG9yaW5nIHJldmlld3NcclxuICAgKi9cclxuICBzdGF0aWMgZ2V0IFJFVklFV1NfVVJMKCkge1xyXG4gICAgY29uc3QgcG9ydCA9IDEzMzcgLy8gQ2hhbmdlIHRoaXMgdG8geW91ciBzZXJ2ZXIgcG9ydFxyXG4gICAgcmV0dXJuIGBodHRwOi8vbG9jYWxob3N0OiR7cG9ydH0vcmV2aWV3cy9gO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoIGFsbCByZXN0YXVyYW50cy5cclxuICAgKi9cclxuICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50cyhjYWxsYmFjaykge1xyXG4gICAgY29uc3QgZGJQcm9taXNlID0gaWRiLm9wZW4oJ3Jlc3RhdW50c0RCJywgMSwgZnVuY3Rpb24odXBncmFkZURiKSB7XHJcbiAgICAgIHVwZ3JhZGVEYi5jcmVhdGVPYmplY3RTdG9yZSgncmVzdGF1cmFudHMnICwge1xyXG4gICAgICAgIGtleVBhdGg6ICdpZCdcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkYlByb21pc2UudGhlbihmdW5jdGlvbihkYikge1xyXG4gICAgICAvLyBjcmVhdGUgdGhlIHRyYW5zYWN0aW9uIGluIHJlYWQvd3JpdGUgb3BlcmF0aW9uIGFuZCBvcGVuIHRoZSBzdG9yZSBmb3IgcmVzdGF1cmFudHNcclxuICAgICAgdmFyIHR4ID0gZGIudHJhbnNhY3Rpb24oJ3Jlc3RhdXJhbnRzJyk7XHJcbiAgICAgIHZhciByZXN0YXVyYW50U3RvcmUgPSB0eC5vYmplY3RTdG9yZSgncmVzdGF1cmFudHMnKTtcclxuICAgICAgcmV0dXJuIHJlc3RhdXJhbnRTdG9yZS5nZXRBbGwoKTtcclxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3RhdXJhbnRzKXtcclxuICAgICAgaWYgKHJlc3RhdXJhbnRzLmxlbmd0aCA9PSAwICkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwibm8gaGF5IGRhdG9zXCIpO1xyXG4gICAgICAgIC8vIE5vIGRhdGEgb24gQkJERC4gRmV0Y2hpbmcgZnJvbSBvdXIgc2VydmVyXHJcbiAgICAgICAgZmV0Y2goREJIZWxwZXIuREFUQUJBU0VfVVJMKVxyXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdGF1cmFudHMpIHtcclxuICAgICAgICAgICAgLy8gYWRkaW5nIHRvIGRhdGFiYXNlXHJcbiAgICAgICAgICAgIGRiUHJvbWlzZS50aGVuKCBkYiA9PntcclxuICAgICAgICAgICAgICB2YXIgdHggPSBkYi50cmFuc2FjdGlvbigncmVzdGF1cmFudHMnLCdyZWFkd3JpdGUnKTtcclxuICAgICAgICAgICAgdmFyIHJlc3RhdXJhbnRTdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdyZXN0YXVyYW50cycpO1xyXG5cclxuICAgICAgICAgICAgcmVzdGF1cmFudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICByZXN0YXVyYW50U3RvcmUucHV0KGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCxyZXN0YXVyYW50cyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhlcnJvcixudWxsKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gUmVzdHVhcmFudHMgaW4gREJcclxuICAgICAgICBjYWxsYmFjayhudWxsLHJlc3RhdXJhbnRzKTtcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoIGEgcmVzdGF1cmFudCBieSBpdHMgSUQuXHJcbiAgICovXHJcbiAgc3RhdGljIGZldGNoUmVzdGF1cmFudEJ5SWQoaWQsIGNhbGxiYWNrKSB7XHJcbiAgICAvLyBmZXRjaCBhbGwgcmVzdGF1cmFudHMgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXHJcbiAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHJlc3RhdXJhbnQgPSByZXN0YXVyYW50cy5maW5kKHIgPT4gci5pZCA9PSBpZCk7XHJcbiAgICAgICAgaWYgKHJlc3RhdXJhbnQpIHsgLy8gR290IHRoZSByZXN0YXVyYW50XHJcbiAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN0YXVyYW50KTtcclxuICAgICAgICB9IGVsc2UgeyAvLyBSZXN0YXVyYW50IGRvZXMgbm90IGV4aXN0IGluIHRoZSBkYXRhYmFzZVxyXG4gICAgICAgICAgY2FsbGJhY2soJ1Jlc3RhdXJhbnQgZG9lcyBub3QgZXhpc3QnLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggcmVzdGF1cmFudHMgYnkgYSBjdWlzaW5lIHR5cGUgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXHJcbiAgICovXHJcbiAgc3RhdGljIGZldGNoUmVzdGF1cmFudEJ5Q3Vpc2luZShjdWlzaW5lLCBjYWxsYmFjaykge1xyXG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzICB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZ1xyXG4gICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cygoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XHJcbiAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBGaWx0ZXIgcmVzdGF1cmFudHMgdG8gaGF2ZSBvbmx5IGdpdmVuIGN1aXNpbmUgdHlwZVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSByZXN0YXVyYW50cy5maWx0ZXIociA9PiByLmN1aXNpbmVfdHlwZSA9PSBjdWlzaW5lKTtcclxuICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaCByZXN0YXVyYW50cyBieSBhIG5laWdoYm9yaG9vZCB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgKi9cclxuICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50QnlOZWlnaGJvcmhvb2QobmVpZ2hib3Job29kLCBjYWxsYmFjaykge1xyXG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXHJcbiAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEZpbHRlciByZXN0YXVyYW50cyB0byBoYXZlIG9ubHkgZ2l2ZW4gbmVpZ2hib3Job29kXHJcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IHJlc3RhdXJhbnRzLmZpbHRlcihyID0+IHIubmVpZ2hib3Job29kID09IG5laWdoYm9yaG9vZCk7XHJcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggcmVzdGF1cmFudHMgYnkgYSBjdWlzaW5lIGFuZCBhIG5laWdoYm9yaG9vZCB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgKi9cclxuICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lQW5kTmVpZ2hib3Job29kKGN1aXNpbmUsIG5laWdoYm9yaG9vZCwgY2FsbGJhY2spIHtcclxuICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xyXG4gICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cygoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XHJcbiAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsZXQgcmVzdWx0cyA9IHJlc3RhdXJhbnRzO1xyXG4gICAgICAgIGlmIChjdWlzaW5lICE9ICdhbGwnKSB7IC8vIGZpbHRlciBieSBjdWlzaW5lXHJcbiAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5maWx0ZXIociA9PiByLmN1aXNpbmVfdHlwZSA9PSBjdWlzaW5lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG5laWdoYm9yaG9vZCAhPSAnYWxsJykgeyAvLyBmaWx0ZXIgYnkgbmVpZ2hib3Job29kXHJcbiAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5maWx0ZXIociA9PiByLm5laWdoYm9yaG9vZCA9PSBuZWlnaGJvcmhvb2QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaCBhbGwgbmVpZ2hib3Job29kcyB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgKi9cclxuICBzdGF0aWMgZmV0Y2hOZWlnaGJvcmhvb2RzKGNhbGxiYWNrKSB7XHJcbiAgICAvLyBGZXRjaCBhbGwgcmVzdGF1cmFudHNcclxuICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xyXG4gICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gR2V0IGFsbCBuZWlnaGJvcmhvb2RzIGZyb20gYWxsIHJlc3RhdXJhbnRzXHJcbiAgICAgICAgY29uc3QgbmVpZ2hib3Job29kcyA9IHJlc3RhdXJhbnRzLm1hcCgodiwgaSkgPT4gcmVzdGF1cmFudHNbaV0ubmVpZ2hib3Job29kKVxyXG4gICAgICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzIGZyb20gbmVpZ2hib3Job29kc1xyXG4gICAgICAgIGNvbnN0IHVuaXF1ZU5laWdoYm9yaG9vZHMgPSBuZWlnaGJvcmhvb2RzLmZpbHRlcigodiwgaSkgPT4gbmVpZ2hib3Job29kcy5pbmRleE9mKHYpID09IGkpXHJcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgdW5pcXVlTmVpZ2hib3Job29kcyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggYWxsIGN1aXNpbmVzIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBmZXRjaEN1aXNpbmVzKGNhbGxiYWNrKSB7XHJcbiAgICAvLyBGZXRjaCBhbGwgcmVzdGF1cmFudHNcclxuICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xyXG4gICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gR2V0IGFsbCBjdWlzaW5lcyBmcm9tIGFsbCByZXN0YXVyYW50c1xyXG4gICAgICAgIGNvbnN0IGN1aXNpbmVzID0gcmVzdGF1cmFudHMubWFwKCh2LCBpKSA9PiByZXN0YXVyYW50c1tpXS5jdWlzaW5lX3R5cGUpXHJcbiAgICAgICAgLy8gUmVtb3ZlIGR1cGxpY2F0ZXMgZnJvbSBjdWlzaW5lc1xyXG4gICAgICAgIGNvbnN0IHVuaXF1ZUN1aXNpbmVzID0gY3Vpc2luZXMuZmlsdGVyKCh2LCBpKSA9PiBjdWlzaW5lcy5pbmRleE9mKHYpID09IGkpXHJcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgdW5pcXVlQ3Vpc2luZXMpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc3RhdXJhbnQgcGFnZSBVUkwuXHJcbiAgICovXHJcbiAgc3RhdGljIHVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCkge1xyXG4gICAgcmV0dXJuIChgLi9yZXN0YXVyYW50Lmh0bWw/aWQ9JHtyZXN0YXVyYW50LmlkfWApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzdGF1cmFudCBpbWFnZSBzcmNzZXQgZm9yIHJlc3BvbnNpdmVzIGltYWdlcy5cclxuICAgKi9cclxuICBzdGF0aWMgaW1hZ2VzU3Jjc2V0Rm9yUmVzdGF1cmFudChyZXN0YXVyYW50KSB7XHJcbiAgICAvLyBhZGRpbmcgYXRyaWJ1dHRlcyBmb3IgcmVzcG9uc2l2ZSBpbWFnZXNcclxuICAgIGNvbnN0IGV4dGVuc2lvbj1cImpwZ1wiOy8vcmVzdGF1cmFudC5waG90b2dyYXBoLm1hdGNoKC9cXC4oW14uXFxcXFxcL10rKSQvKS5wb3AoKTtcclxuICAgIGxldCBmaWxlbmFtZSA9IHJlc3RhdXJhbnQucGhvdG9ncmFwaDsvL3Jlc3RhdXJhbnQucGhvdG9ncmFwaC5yZXBsYWNlKC9cXC4oW14uXFxcXFxcL10rKSQvLCcnKVxyXG4gICAgaWYgKCFmaWxlbmFtZSkgZmlsZW5hbWU9XCIxMFwiO1xyXG4gICAgcmV0dXJuIChgL2ltZy8ke2ZpbGVuYW1lfS1zbWFsbC4ke2V4dGVuc2lvbn0gMjUwdyxcclxuICAgICAgICAgICAgL2ltZy8ke2ZpbGVuYW1lfS1tZWRpdW0uJHtleHRlbnNpb259IDQ2MHcsXHJcbiAgICAgICAgICAgIC9pbWcvJHtmaWxlbmFtZX0tbGFyZ2UuJHtleHRlbnNpb259IDgwMHdgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc3RhdXJhbnQgaW1hZ2Ugc3Jjc2V0IGZvciByZXNwb25zaXZlcyBpbWFnZXMuXHJcbiAgICovXHJcbiAgc3RhdGljIGltYWdlU2l6ZXNGb3JSZXN0YXVyYW50KGlubmVyKSB7XHJcbiAgICAvLyBhZGRpbmcgYXRyaWJ1dHRlcyBmb3IgcmVzcG9uc2l2ZSBpbWFnZXNcclxuICAgIGlmIChpbm5lcikgcmV0dXJuIGAobWF4LXdpZHRoOiA2MThweCkgY2FsYygxMDB2dyAtIDgwcHgpLCBjYWxjKDUwdncgLSA4MHB4KWA7XHJcbiAgICByZXR1cm4gYChtYXgtd2lkdGg6IDYxOHB4KSBjYWxjKDEwMHZ3IC0gOTBweCksIGNhbGMoNTB2dyAtIDkwcHgpYDtcclxuICB9XHJcblxyXG4gICAvKipcclxuICAgKiBSZXN0YXVyYW50IGltYWdlIHNyY3NldC5cclxuICAgKi9cclxuICBzdGF0aWMgaW1hZ2VVcmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpIHtcclxuICAgIC8vIGFkZGluZyBhdHJpYnV0dGVzIGZvciByZXNwb25zaXZlIGltYWdlc1xyXG4gICAgY29uc3QgZXh0ZW5zaW9uPVwianBnXCI7Ly9yZXN0YXVyYW50LnBob3RvZ3JhcGgubWF0Y2goL1xcLihbXi5cXFxcXFwvXSspJC8pLnBvcCgpO1xyXG4gICAgbGV0IGZpbGVuYW1lID0gcmVzdGF1cmFudC5waG90b2dyYXBoOy8vcmVzdGF1cmFudC5waG90b2dyYXBoLnJlcGxhY2UoL1xcLihbXi5cXFxcXFwvXSspJC8sJycpXHJcbiAgICBpZiAoIWZpbGVuYW1lKSBmaWxlbmFtZT1cIjEwXCI7XHJcbiAgICByZXR1cm4gKGAvaW1nLyR7ZmlsZW5hbWV9LXNtYWxsLiR7ZXh0ZW5zaW9ufWApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWFwIG1hcmtlciBmb3IgYSByZXN0YXVyYW50LlxyXG4gICAqL1xyXG4gIHN0YXRpYyBtYXBNYXJrZXJGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQsIG1hcCkge1xyXG4gICAgY29uc3QgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XHJcbiAgICAgIHBvc2l0aW9uOiByZXN0YXVyYW50LmxhdGxuZyxcclxuICAgICAgdGl0bGU6IHJlc3RhdXJhbnQubmFtZSxcclxuICAgICAgdXJsOiBEQkhlbHBlci51cmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpLFxyXG4gICAgICBtYXA6IG1hcCxcclxuICAgICAgYW5pbWF0aW9uOiBnb29nbGUubWFwcy5BbmltYXRpb24uRFJPUH1cclxuICAgICk7XHJcbiAgICByZXR1cm4gbWFya2VyO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIFN0b3JlcyBhIHJldmlldyBpbiB0aGUgc2VsZWN0ZWQgZGFiYXRhYmFzZS5cclxuICAgKiBSZXR1cm4gYSBQcm9taXNlIHdpdGggdGhlIHN0YXRlIG9mIHRoZSBpbnNlcnRcclxuICAgKi9cclxuICBzdGF0aWMgc3RvcmVSZXZpZXdzREIocmV2aWV3cywgZGF0YWJhc2UpIHtcclxuICAgIGNvbnN0IGRiUHJvbWlzZSA9IGlkYi5vcGVuKGRhdGFiYXNlLCAxLCBmdW5jdGlvbih1cGdyYWRlRGIpIHtcclxuICAgICAgdXBncmFkZURiLmNyZWF0ZU9iamVjdFN0b3JlKCdyZXZpZXdzJyAsIHtcclxuICAgICAgICBrZXlQYXRoOiAnbmFtZSdcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gZGJQcm9taXNlLnRoZW4oZnVuY3Rpb24oZGIpIHtcclxuICAgICAgdmFyIHR4ID0gZGIudHJhbnNhY3Rpb24oJ3Jldmlld3MnLCdyZWFkd3JpdGUnKTtcclxuICAgICAgdmFyIHJldmlld3NTdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdyZXZpZXdzJyk7XHJcbiAgICAgIHJldmlld3MuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICByZXZpZXdzU3RvcmUucHV0KGVsZW1lbnQpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZGVsZXRlIGEgcmV2aWV3IGluIHRoZSBzZWxlY3RlZCBkYWJhdGFiYXNlLlxyXG4gICAqIFJldHVybiBhIFByb21pc2Ugd2l0aCB0aGUgc3RhdGUgb2YgdGhlIGRlbGV0ZVxyXG4gICAqL1xyXG4gIHN0YXRpYyByZW1vdmVSZXZpZXdGcm9tREIocmV2aWV3LCBkYXRhYmFzZSkge1xyXG4gICAgY29uc3QgZGJQcm9taXNlID0gaWRiLm9wZW4oZGF0YWJhc2UsIDEsIGZ1bmN0aW9uKHVwZ3JhZGVEYikge1xyXG4gICAgICB1cGdyYWRlRGIuY3JlYXRlT2JqZWN0U3RvcmUoJ3Jldmlld3MnICwge1xyXG4gICAgICAgIGtleVBhdGg6ICduYW1lJ1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBkYlByb21pc2UudGhlbihmdW5jdGlvbihkYikge1xyXG4gICAgICBjb25zb2xlLmxvZyhkYXRhYmFzZSk7XHJcbiAgICAgIHZhciB0eCA9IGRiLnRyYW5zYWN0aW9uKCdyZXZpZXdzJywncmVhZHdyaXRlJyk7XHJcbiAgICAgIHZhciByZXZpZXdzU3RvcmUgPSB0eC5vYmplY3RTdG9yZSgncmV2aWV3cycpO1xyXG4gICAgICByZXZpZXdzU3RvcmUuZGVsZXRlKHJldmlldy5uYW1lKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0cmlldmVzIGEgbGlzdCBvZiByZXZpZXdzIGluIHRoZSBzZWxlY3RlZCBkYWJhdGFiYXNlLlxyXG4gICAqIFJldHVybiBhIFByb21pc2Ugd2l0aCB0aGUgcmV2aWV3c1xyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXRBbGxSZXZpZXdzREIoZGF0YWJhc2UpIHtcclxuICAgIGNvbnN0IGRiUHJvbWlzZSA9IGlkYi5vcGVuKGRhdGFiYXNlLCAxLCBmdW5jdGlvbih1cGdyYWRlRGIpIHtcclxuICAgICAgdXBncmFkZURiLmNyZWF0ZU9iamVjdFN0b3JlKCdyZXZpZXdzJyAsIHtcclxuICAgICAgICBrZXlQYXRoOiAnbmFtZSdcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gZGJQcm9taXNlLnRoZW4oZnVuY3Rpb24oZGIpIHtcclxuICAgICAgdmFyIHR4ID0gZGIudHJhbnNhY3Rpb24oJ3Jldmlld3MnKTtcclxuICAgICAgdmFyIHJldmlld3NTdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdyZXZpZXdzJyk7XHJcbiAgICAgIHJldHVybiByZXZpZXdzU3RvcmUuZ2V0QWxsKCk7XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2VuZCBwb3N0IHJlcXVlc3QgZm9yIGFkZGluZyByZXZpZXcgdG8gYSBzZXJ2ZXJcclxuICAgKi9cclxuICBzdGF0aWMgc2VuZFBvc3RSZXF1ZXN0KHJldmlldykge1xyXG4gICAgcmV0dXJuIGZldGNoKERCSGVscGVyLlJFVklFV1NfVVJMLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXZpZXcpXHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XHJcbiAgICAgIC8vIEVycm9yIGZldGNoaW5nIHBvc3QgcmVxdWVzdCwgbm8gbmV0d29yaywgc2NoZWR1bGUgdGhlIHNlbmRcclxuICAgICAgLy8gc3RvcmluZyBpdCBpbiBpZGJcclxuICAgICAgY29uc3QgcmV2aWV3cyA9IFtdO1xyXG4gICAgICByZXZpZXdzLnB1c2gocmV2aWV3KTtcclxuICAgICAgY29uc29sZS5sb2coXCJkYXRhYmFzZVwiKTtcclxuICAgICAgcmV0dXJuIERCSGVscGVyLnN0b3JlUmV2aWV3c0RCKHJldmlld3MsICdwZW5kaW5nUG9zdHNEQicpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2hhbmdlRmF2b3JpdGVTdGF0dXMoaWQsIGZhdm9yaXRlKSB7XHJcbiAgICBjb25zdCB1cmwgPSBgJHtEQkhlbHBlci5EQVRBQkFTRV9VUkx9LyR7aWR9Lz9pc19mYXZvcml0ZT0ke2Zhdm9yaXRlfWA7XHJcbiAgICBmZXRjaCh1cmwsIHsgbWV0aG9kOiAnUFVUJyB9KS50aGVuKCgpPT57XHJcbiAgICAgIGNvbnNvbGUubG9nKCd1cGRhdGVkJyk7XHJcbiAgICB9KS5jYXRjaChlcnJvcj0+Y29uc29sZS5sb2coZXJyb3IpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgICogU3RvcmVzIGEgcmV2aWV3IGluIHRoZSBzZWxlY3RlZCBkYWJhdGFiYXNlLlxyXG4gICAgICogUmV0dXJuIGEgUHJvbWlzZSB3aXRoIHRoZSBzdGF0ZSBvZiB0aGUgaW5zZXJ0XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB1cGRhdGVSZXN0YXVyYW50RmF2KGlkKSB7XHJcbiAgICAgIGNvbnN0IGRiUHJvbWlzZSA9IGlkYi5vcGVuKCdyZXN0YXVudHNEQicsIDEsIGZ1bmN0aW9uKHVwZ3JhZGVEYikge1xyXG4gICAgICAgIHVwZ3JhZGVEYi5jcmVhdGVPYmplY3RTdG9yZSgncmVzdGF1cmFudHMnICwge1xyXG4gICAgICAgICAga2V5UGF0aDogJ2lkJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybiBkYlByb21pc2UudGhlbihmdW5jdGlvbihkYikge1xyXG4gICAgICAgIHZhciB0eCA9IGRiLnRyYW5zYWN0aW9uKCdyZXN0YXVyYW50cycsJ3JlYWR3cml0ZScpO1xyXG4gICAgICAgIHZhciByZXN0YXVyYW50U3RvcmUgPSB0eC5vYmplY3RTdG9yZSgncmVzdGF1cmFudHMnKTtcclxuICAgICAgICByZXN0YXVyYW50U3RvcmUuZ2V0KGlkKS50aGVuKCByZXN0YXVyYW50ID0+IHtcclxuICAgICAgICAgIHJlc3RhdXJhbnQuaXNfZmF2b3JpdGU9KHJlc3RhdXJhbnQuaXNfZmF2b3JpdGU9PT0ndHJ1ZScgfHwgcmVzdGF1cmFudC5pc19mYXZvcml0ZT09PXRydWUpP3RydWU6ZmFsc2U7XHJcbiAgICAgICAgICByZXN0YXVyYW50LmlzX2Zhdm9yaXRlPSFyZXN0YXVyYW50LmlzX2Zhdm9yaXRlO1xyXG4gICAgICAgICAgcmVzdGF1cmFudFN0b3JlLnB1dChyZXN0YXVyYW50KTtcclxuICAgICAgICAgIERCSGVscGVyLmNoYW5nZUZhdm9yaXRlU3RhdHVzKGlkLHJlc3RhdXJhbnQuaXNfZmF2b3JpdGUpXHJcbiAgICAgICAgfSlcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBEZWxldGUgYSByZXZpZXcgZnJvbSBzZXJ2ZXIgdGhyb3VnaHQgZGVsZXRlIHJlcXVlc3RcclxuICAgKiBoYW5keSBmZXRjaChcImh0dHA6Ly9sb2NhbGhvc3Q6MTMzNy9yZXZpZXdzLzUzXCIsIHttZXRob2Q6ICdERUxFVEUnfSkudGhlbihyZXNwPT5jb25zb2xlLmxvZyhyZXNwKSkuY2F0Y2goZXJyPT5jb25zb2xlLmxvZyhlcnIpKTtcclxuICAgKi9cclxuICBzdGF0aWMgZGVsZXRlUmV2aWV3KHJldmlldyl7XHJcbiAgICBpZiAocmV2aWV3LmlkKVxyXG4gICAgICByZXR1cm4gZmV0Y2goKGAke0RCSGVscGVyLlJFVklFV1NfVVJMfSR7cmV2aWV3LmlkfWAsIHttZXRob2Q6ICdERUxFVEUnfSkpO1xyXG4gICAgcmV0dXJuIC8vIFRPRE8gZGVsZXRlIGZyb20gcGFnZSBhbmQgSURCIHBlbmRpbmdQb3N0c0RCXHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggYWxsIHJldmlld3MgZm9yIGEgcmVzdHVhcmFudC5cclxuICAgKi9cclxuICBzdGF0aWMgZmV0Y2hSZXZpZXdzQnlJZChpZCwgY2FsbGJhY2spIHtcclxuXHJcbiAgICAvLyBGZXRjaGluZyByZXZpZXdzIGZyb20gbmV0d29ya1xyXG4gICAgZmV0Y2goYCR7REJIZWxwZXIuUkVWSUVXU19VUkx9P3Jlc3RhdXJhbnRfaWQ9JHtpZH1gKVxyXG4gICAgICAudGhlbihyZXNwb25zZT0+cmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAudGhlbihmdW5jdGlvbiAocmV2aWV3cykge1xyXG4gICAgICAgIC8vc3RvcmluZyBpdCBpbiBpZGIgZGF0YWJhc2VcclxuICAgICAgICBEQkhlbHBlci5zdG9yZVJldmlld3NEQihyZXZpZXdzLCAncmV2aWV3cycpXHJcbiAgICAgICAgLnRoZW4oY2FsbGJhY2sobnVsbCxyZXZpZXdzKSlcclxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4gY2FsbGJhY2soZXJyb3IsbnVsbCkpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgLy8gT2ZmbGluZSBtb2RlIG9yIG5ldHdvcmsgZXJyb3JcclxuICAgICAgICAvL3JlY292ZXIgZnJvbSBpZGIgZGF0YWJhc2UgaWYgd2UgY291bGRcclxuICAgICAgICBEQkhlbHBlci5nZXRBbGxSZXZpZXdzREIoJ3Jldmlld3MnKVxyXG4gICAgICAgIC50aGVuIChmdW5jdGlvbiAocmV2aWV3cykge1xyXG4gICAgICAgICAgLy8gT3IgcmV2aWV3IGRhdGFiYXNlIGlzIGVtcHR5IG9yIHJldHVybnMgZGF0YVxyXG4gICAgICAgICAgY2FsbGJhY2sobnVsbCxyZXZpZXdzKTtcclxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xyXG4gICAgICAgICAgLy8gRXJyb3IgcmV0cmlldmluZyBmcm9tIGRiXHJcbiAgICAgICAgICBjYWxsYmFjayhlcnJvcixudWxsKTtcclxuICAgICAgICB9KVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19
